// <auto-generated />
using System;
using EFCoreTopics.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreTopics.Migrations
{
    [DbContext(typeof(AdventureWorksLContext))]
    [Migration("20230408104009_AddedTpcTablesBugFix")]
    partial class AddedTpcTablesBugFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreTopics.Database.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasComment("Primary key for Address records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First street address line.");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second street address line.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the city.");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Postal code for the street address.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of state or province.");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_Address_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressLine1", "AddressLine2", "City", "StateProvince", "PostalCode", "CountryRegion" }, "IX_Address_AddressLine1_AddressLine2_City_StateProvince_PostalCode_CountryRegion");

                    b.HasIndex(new[] { "StateProvince" }, "IX_Address_StateProvince");

                    b.ToTable("Address", "SalesLT", t =>
                        {
                            t.HasComment("Street address information for customers.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.BuildVersion", b =>
                {
                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Database Version")
                        .HasComment("Version number of the database in 9.yy.mm.dd.00 format.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("SystemInformationID")
                        .HasComment("Primary key for BuildVersion records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("SystemInformationId"));

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.ToTable("BuildVersion", null, t =>
                        {
                            t.HasComment("Current version number of the AdventureWorksLT 2012 sample database. ");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Primary key for Customer records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The customer's organization.");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("E-mail address for the person.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person.");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Middle name or middle initial of the person.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit")
                        .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Password for the e-mail account.");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComment("Random value concatenated with the password string before the password is hashed.");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Phone number associated with the person.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesPerson")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The customer's sales person, an employee of AdventureWorks Cycles.");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Surname suffix. For example, Sr. or Jr.");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("A courtesy title. For example, Mr. or Ms.");

                    b.HasKey("CustomerId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_Customer_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Customer_EmailAddress");

                    b.ToTable("Customer", "SalesLT", t =>
                        {
                            t.HasComment("Customer information.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Primary key. Foreign key to Customer.CustomerID.");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasComment("Primary key. Foreign key to Address.AddressID.");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The kind of Address. One of: Archive, Billing, Home, Main Office, Primary, Shipping");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_CustomerAddress_CustomerID_AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_CustomerAddress_rowguid")
                        .IsUnique();

                    b.ToTable("CustomerAddress", "SalesLT", t =>
                        {
                            t.HasComment("Cross-reference table mapping customers to their address(es).");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogID")
                        .HasComment("Primary key for ErrorLog records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorLogId"));

                    b.Property<int?>("ErrorLine")
                        .HasColumnType("int")
                        .HasComment("The line number at which the error occurred.");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("The message text of the error that occurred.");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int")
                        .HasComment("The error number of the error that occurred.");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)")
                        .HasComment("The name of the stored procedure or trigger where the error occurred.");

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int")
                        .HasComment("The severity of the error that occurred.");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int")
                        .HasComment("The state number of the error that occurred.");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("The date and time at which the error occurred.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The user who executed the batch in which the error occurred.");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog", null, t =>
                        {
                            t.HasComment("Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("Primary key for Product records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Product color.");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was discontinued.");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product.");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID. ");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Unique product identification number.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was no longer available for sale.");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was available for sale.");

                    b.Property<string>("Size")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Product size.");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasComment("Standard cost of the product.");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Small image of the product.");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Small image file name.");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("Product weight.");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex(new[] { "Name" }, "AK_Product_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductNumber" }, "AK_Product_ProductNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_Product_rowguid")
                        .IsUnique();

                    b.ToTable("Product", "SalesLT", t =>
                        {
                            t.HasComment("Products sold or used in the manfacturing of sold products.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Primary key for ProductCategory records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category description.");

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentProductCategoryID")
                        .HasComment("Product category identification number of immediate ancestor category. Foreign key to ProductCategory.ProductCategoryID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_ProductCategory_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductCategory_rowguid")
                        .IsUnique();

                    b.ToTable("ProductCategory", "SalesLT", t =>
                        {
                            t.HasComment("High-level product categorization.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasComment("Primary key for ProductDescription records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDescriptionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of the product.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductDescription_rowguid")
                        .IsUnique();

                    b.ToTable("ProductDescription", "SalesLT", t =>
                        {
                            t.HasComment("Product descriptions in several languages.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductModelId"));

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex(new[] { "Name" }, "AK_ProductModel_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductModel_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "CatalogDescription" }, "PXML_ProductModel_CatalogDescription");

                    b.ToTable("ProductModel", "SalesLT");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasComment("Primary key. Foreign key to ProductModel.ProductModelID.");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasComment("Primary key. Foreign key to ProductDescription.ProductDescriptionID.");

                    b.Property<string>("Culture")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength()
                        .HasComment("The culture for which the description is written");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductModelProductDescription_rowguid")
                        .IsUnique();

                    b.ToTable("ProductModelProductDescription", "SalesLT", t =>
                        {
                            t.HasComment("Cross-reference table mapping product descriptions and the language the description is written in.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderDetailID")
                        .HasComment("Primary key. One incremental unique number per product sold.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderDetailId"));

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))", false)
                        .HasComment("Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint")
                        .HasComment("Quantity ordered per product.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("Product sold to customer. Foreign key to Product.ProductID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price of a single product.");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money")
                        .HasComment("Discount amount.");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex(new[] { "Rowguid" }, "AK_SalesOrderDetail_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductId" }, "IX_SalesOrderDetail_ProductID");

                    b.ToTable("SalesOrderDetail", "SalesLT", t =>
                        {
                            t.HasComment("Individual products associated with a specific sales order. See SalesOrderHeader.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasComment("Primary key.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Financial accounting number reference.");

                    b.Property<int?>("BillToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillToAddressID")
                        .HasComment("The ID of the location to send invoices.  Foreign key to the Address table.");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Sales representative comments.");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasComment("Approval code provided by the credit card company.");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer identification number. Foreign key to Customer.CustomerID.");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order is due to the customer.");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Shipping cost.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Dates the sales order was created.");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Customer purchase order number reference. ");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Incremental number to track changes to the sales order over time.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))", false)
                        .HasComment("Unique sales order identification number.");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order was shipped to the customer.");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID")
                        .HasComment("The ID of the location to send goods.  Foreign key to the Address table.");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Tax amount.");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", false)
                        .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex(new[] { "SalesOrderNumber" }, "AK_SalesOrderHeader_SalesOrderNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_SalesOrderHeader_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "CustomerId" }, "IX_SalesOrderHeader_CustomerID");

                    b.ToTable("SalesOrderHeader", "SalesLT", t =>
                        {
                            t.HasComment("General sales order information.");
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tpc.InternationalOrderTpc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InternationalOrdersTpc", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 4)
                                .HasAnnotation("SqlServer:IdentitySeed", 2L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tpc.OrderTpc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrdersTpc", null, t =>
                        {
                            t.Property("Id")
                                .HasAnnotation("SqlServer:IdentityIncrement", 2)
                                .HasAnnotation("SqlServer:IdentitySeed", 1L)
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                        });
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tph.OrderTph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("OrderType").HasValue("normal_order");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tpt.OrderTpt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrdersTpt", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.VGetAllCategory", b =>
                {
                    b.Property<string>("ParentProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<string>("ProductCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vGetAllCategories", "SalesLT");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.VProductAndDescription", b =>
                {
                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vProductAndDescription", "SalesLT");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.VProductModelCatalogDescription", b =>
                {
                    b.Property<string>("BikeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Copyright")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Crankset")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MaintenanceDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoOfYears")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Pedal")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PictureAngle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PictureSize")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProductLine")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductPhotoId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ProductPhotoID");

                    b.Property<string>("ProductUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ProductURL");

                    b.Property<string>("RiderExperience")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid");

                    b.Property<string>("Saddle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Style")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WarrantyPeriod")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Wheel")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vProductModelCatalogDescription", "SalesLT");
                });

            modelBuilder.Entity("EFCoreTopics.Database.QueryModels.GetCityAndProvinceFromAddressModel", b =>
                {
                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("AddressId");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetCityAndProvinceFromAddressModels");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tph.InternationalOrderTph", b =>
                {
                    b.HasBaseType("EFCoreTopics.Database.Models.Tph.OrderTph");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("international_order");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tpt.InternationalOrderTpt", b =>
                {
                    b.HasBaseType("EFCoreTopics.Database.Models.Tpt.OrderTpt");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("InternationalOrdersTpt", (string)null);
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.CustomerAddress", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .IsRequired();

                    b.HasOne("EFCoreTopics.Database.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Product", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("EFCoreTopics.Database.Models.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductCategory", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");

                    b.Navigation("ParentProductCategory");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductModelProductDescription", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptions")
                        .HasForeignKey("ProductDescriptionId")
                        .IsRequired();

                    b.HasOne("EFCoreTopics.Database.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptions")
                        .HasForeignKey("ProductModelId")
                        .IsRequired();

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.Product", "Product")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("EFCoreTopics.Database.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddresses")
                        .HasForeignKey("BillToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("EFCoreTopics.Database.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("EFCoreTopics.Database.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddresses")
                        .HasForeignKey("ShipToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");

                    b.Navigation("BillToAddress");

                    b.Navigation("Customer");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Tpt.InternationalOrderTpt", b =>
                {
                    b.HasOne("EFCoreTopics.Database.Models.Tpt.OrderTpt", null)
                        .WithOne()
                        .HasForeignKey("EFCoreTopics.Database.Models.Tpt.InternationalOrderTpt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("SalesOrderHeaderBillToAddresses");

                    b.Navigation("SalesOrderHeaderShipToAddresses");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.Product", b =>
                {
                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductCategory", b =>
                {
                    b.Navigation("InverseParentProductCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescriptions");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.ProductModel", b =>
                {
                    b.Navigation("ProductModelProductDescriptions");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EFCoreTopics.Database.Models.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
